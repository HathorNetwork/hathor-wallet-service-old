service: hathor-wallet-service
frameworkVersion: '2'

useDotenv: true

custom: 
  warmup: 
    walletWarmer: # Keeps the lambdas used by the wallets initialization warm
      enabled: true
      verbose: true
      events:
        - schedule: cron(0/5 * ? * MON-SUN *) # Every 5 minutes, every day
  logLevelMap:  
    mainnet: info
    testnet: info
    dev-testnet: info
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  prune:
    automatic: true
    number: 3
  authorizer:
    walletBearer:
      name: bearerAuthorizer
      type: TOKEN
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)
  # Configures throttling settings for the API Gateway stage
  # They apply to all http endpoints, unless specifically overridden
  apiGatewayThrottling:
    maxRequestsPerSecond: 500
    maxConcurrentRequests: 250

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-api-gateway-throttling
  - serverless-plugin-warmup


resources:
  Resources:
    # This is needed to add CORS headers when the authorizer rejects an authorization request
    # as we don't have control over the response.
    # Taken from: https://www.serverless.com/blog/cors-api-gateway-survival-guide/
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    WalletServiceNewTxQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName:
            WalletServiceNewTxQueue_${opt:stage, 'dev'}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # In MB. This is the memory allocated for the Lambdas, they cannot use more than this
  # and will break if they try.
  memorySize: 256
  # This is the default timeout. Each function can specify a different value
  timeout: 6
  websocketsApiName: wallet-realtime-ws-api-${opt:stage, 'dev'}
  websocketsApiRouteSelectionExpression: $request.body.action
  vpc:
    securityGroupIds:
      - ${env:AWS_VPC_DEFAULT_SG_ID}
    subnetIds:
      - ${env:AWS_SUBNET_ID_1}
      - ${env:AWS_SUBNET_ID_2}
      - ${env:AWS_SUBNET_ID_3}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    ADMINTOKEN: ${env:ADMINTOKEN}
    AUTH_SECRET: ${env:AUTH_SECRET}
    AWS_VPC_DEFAULT_SG_ID: ${env:AWS_VPC_DEFAULT_SG_ID}
    AWS_SUBNET_ID_1: ${env:AWS_SUBNET_ID_1}
    AWS_SUBNET_ID_2: ${env:AWS_SUBNET_ID_2}
    AWS_SUBNET_ID_3: ${env:AWS_SUBNET_ID_3}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BLOCK_REWARD_LOCK: ${env:BLOCK_REWARD_LOCK}
    CONFIRM_FIRST_ADDRESS: ${env:CONFIRM_FIRST_ADDRESS}
    DB_ENDPOINT: ${env:DB_ENDPOINT}
    DB_PORT: ${env:DB_PORT}
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASS: ${env:DB_PASS}
    MAX_ADDRESS_GAP: ${env:MAX_ADDRESS_GAP}
    NETWORK: ${env:NETWORK}
    NEW_TX_SQS: { Ref: WalletServiceNewTxQueue }
    REDIS_URL: ${env:REDIS_URL}
    REDIS_PASSWORD: ${env:REDIS_PASSWORD}
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, 'dev'}
    VOIDED_TX_OFFSET: ${env:VOIDED_TX_OFFSET}
    DEFAULT_SERVER: ${env:DEFAULT_SERVER}
    WS_DOMAIN: ${env:WS_DOMAIN}
    TX_HISTORY_MAX_COUNT: ${env:TX_HISTORY_MAX_COUNT}
    LOG_LEVEL: ${self:custom.logLevel}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ WalletServiceNewTxQueue, Arn ]

functions:
  onHandleOldVoidedTxs:
    handler: src/mempool.onHandleOldVoidedTxs
    events:
      - schedule: rate(${env:VOIDED_TX_OFFSET} minutes)
  getLatestBlock:
    handler: src/height.getLatestBlock
  onNewTxRequest:
    handler: src/txProcessor.onNewTxRequest
  onMinersListRequest:
    handler: src/api/miners.onMinersListRequest
  onTotalSupplyRequest:
    handler: src/api/totalSupply.onTotalSupplyRequest
    timeout: 120 # 2 minutes
  onHandleReorgRequest:
    handler: src/txProcessor.onHandleReorgRequest
    timeout: 300 # 5 minutes
  onNewTxEvent:
    handler: src/txProcessor.onNewTxEvent
  loadWalletAsync:
    handler: src/api/wallet.loadWallet
  loadWalletApi:
    role: arn:aws:iam::769498303037:role/WalletServiceLoadWalletLambda
    handler: src/api/wallet.load
    warmup: true
    events:
      - http:
          path: wallet/init
          method: post
          cors: true
  changeWalletAuthXpubApi:
    handler: src/api/wallet.changeAuthXpub
    events:
      - http:
          path: wallet/auth
          method: put
          cors: true
  getWalletStatusApi:
    handler: src/api/wallet.get
    warmup: true
    events:
      - http:
          path: wallet/status
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getAddressesApi:
    handler: src/api/addresses.get
    warmup: true
    events:
      - http:
          path: wallet/addresses
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getNewAddresses:
    handler: src/api/newAddresses.get
    warmup: true
    events:
      - http:
          path: wallet/addresses/new
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getUtxos:
    handler: src/api/txOutputs.getFilteredUtxos
    events:
      - http:
          path: wallet/utxos
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getTxOutputs:
    handler: src/api/txOutputs.getFilteredTxOutputs
    events:
      - http:
          path: wallet/tx_outputs
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getBalanceApi:
    handler: src/api/balances.get
    warmup: true
    events:
      - http:
          path: wallet/balances
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getTokensApi:
    handler: src/api/tokens.get
    warmup: true
    events:
      - http:
          path: wallet/tokens
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getTokenDetails:
    handler: src/api/tokens.getTokenDetails
    events:
      - http:
          path: wallet/tokens/{token_id}/details
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
          request:
            parameters:
              paths:
                token_id: true
  getVersionData:
    handler: src/api/version.get
    warmup: true
    events:
      - http:
          path: version
          method: get
          cors: true
  getTxHistoryApi:
    handler: src/api/txhistory.get
    warmup: true
    events:
      - http:
          path: wallet/history
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  createTxProposalApi:
    handler: src/api/txProposalCreate.create
    events:
      - http:
          path: tx/proposal
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  sendTxProposalApi:
    handler: src/api/txProposalSend.send
    events:
      - http:
          path: tx/proposal/{txProposalId}
          method: put
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
          request:
            parameters:
              paths:
                txProposalId: true
  deleteTxProposalApi:
    handler: src/api/txProposalDestroy.destroy
    events:
      - http:
          path: tx/proposal/{txProposalId}
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
          request:
            parameters:
              paths:
                txProposalId: true
  wsConnect:
    handler: src/ws/connection.connect
    timeout: 1
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: ping
  wsJoin:
    handler: src/ws/join.handler
    timeout: 1
    events:
      - websocket:
          route: join
  wsTxNotifyNew:
    handler: src/ws/txNotify.onNewTx
    timeout: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - WalletServiceNewTxQueue
              - Arn
          batchSize: 10
          maximumBatchingWindow: 3
  wsTxNotifyUpdate:
    handler: src/ws/txNotify.onUpdateTx
    timeout: 1
  wsAdminBroadcast:
    handler: src/ws/admin.broadcast
    timeout: 1
  wsAdminDisconnect:
    handler: src/ws/admin.disconnect
    timeout: 1
  wsAdminMulticast:
    handler: src/ws/admin.multicast
    timeout: 1
  authTokenApi:
    handler: src/api/auth.tokenHandler
    timeout: 6
    events:
      - http:
          path: auth/token
          method: post
          cors: true
  bearerAuthorizer:
    handler: src/api/auth.bearerAuthorizer
  metrics:
    handler: src/metrics.getMetrics
    events:
      - http:
          path: metrics
          method: get
          throttling:
            maxRequestsPerSecond: 2
            maxConcurrentRequests: 2
