service:
  name: hathor-wallet-service

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  prune:
    automatic: true
    number: 3
  authorizer:
    walletBearer:
      name: bearerAuthorizer
      type: TOKEN
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-dotenv-plugin

resources:
  Resources:
    WalletServiceNewTxQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName:
            WalletServiceNewTxQueue_${env:STAGE}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: us-east-1
  websocketsApiName: wallet-realtime-ws-api
  websocketsApiRouteSelectionExpression: $request.body.action
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SERVICE_NAME: ${self:service}
    DB_ENDPOINT: ${env:DB_ENDPOINT, 'rds-endpoint-TODO'}
    DB_NAME: ${self:service}-${env:STAGE}
    DB_USER: ${env:STAGE}-user
    NEW_TX_SQS: { Ref: WalletServiceNewTxQueue }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ WalletServiceNewTxQueue, Arn ]

functions:
  getLatestBlock:
    handler: src/height.getLatestBlock
  onNewTxRequest:
    handler: src/txProcessor.onNewTxRequest
  onHandleReorgRequest:
    handler: src/txProcessor.onHandleReorgRequest
  onSearchForLatestValidBlockRequest:
    handler: src/txProcessor.onSearchForLatestValidBlockRequest
  onNewTxEvent:
    handler: src/txProcessor.onNewTxEvent
  loadWalletAsync:
    handler: src/api/wallet.loadWallet
  loadWalletApi:
    handler: src/api/wallet.load
    events:
      - http:
          path: wallet
          method: post
          cors: true
  getWalletStatusApi:
    handler: src/api/wallet.get
    events:
      - http:
          path: wallet
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getAddressesApi:
    handler: src/api/addresses.get
    events:
      - http:
          path: addresses
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getBalanceApi:
    handler: src/api/balances.get
    events:
      - http:
          path: balances
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  getTxHistoryApi:
    handler: src/api/txhistory.get
    events:
      - http:
          path: txhistory
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  createTxProposalApi:
    handler: src/api/txProposalCreate.create
    events:
      - http:
          path: txproposals
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
  sendTxProposalApi:
    handler: src/api/txProposalSend.send
    events:
      - http:
          path: txproposals/{txProposalId}
          method: put
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
          request:
            parameters:
              paths:
                txProposalId: true
  deleteTxProposalApi:
    handler: src/api/txProposalDestroy.destroy
    events:
      - http:
          path: txproposals/{txProposalId}
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer.walletBearer}
          request:
            parameters:
              paths:
                txProposalId: true
  wsConnect:
    handler: src/ws/connection.connect
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: ping
  wsJoin:
    handler: src/ws/join.handler
    events:
      - websocket:
          route: join
  wsTxNotifyNew:
    handler: src/ws/txNotify.onNewTx
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - WalletServiceNewTxQueue
              - Arn
          batchSize: 10
          maximumBatchingWindow: 60
  wsTxNotifyUpdate:
    handler: src/ws/txNotify.onUpdateTx
  wsAdminBroadcast:
    handler: src/ws/admin.broadcast
  wsAdminDisconnect:
    handler: src/ws/admin.disconnect
  wsAdminMulticast:
    handler: src/ws/admin.multicast
  authTokenApi:
    handler: src/api/auth.tokenHandler
    events:
      - http:
          path: auth/token
          method: post
          cors: true
  bearerAuthorizer:
    handler: src/api/auth.bearerAuthorizer
